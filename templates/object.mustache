
class {{name}} extends base.EntityWrapper {
  static final List<String> KNOWN_PROPERTIES = [
{{#properties}}    "{{name}}",
{{/properties}}  ];

  {{name}}() : super.wrap(new base.RawEntity(), (cloned) => new {{name}}._wrap(cloned));

  {{name}}._wrap(base.Entity entity) : super.wrap(entity, (cloned) => new {{name}}._wrap(cloned));

  {{name}}.wrap(base.Entity entity, base.EntityWrapperCloneFn cloneWrapper) :
      super.wrap(entity, (cloned) => cloneWrapper(cloned));

{{#properties}}
  {{type}} get {{name}} => this["{{name}}"];
  set {{name}}({{type}} value) {
    this["{{name}}"] = value;
  }
  {{type}} remove{{capName}}() => this.remove("{{name}}");
{{/properties}}

  factory {{name}}.fromJsonString(String strJson) => new {{name}}.fromJson(parse(strJson));

  factory {{name}}.fromJson(Map json) {
    if (json == null) {
      return null;
    }
    json = new Map.from(json);
    var result = new {{name}}()
{{#properties}}
{{#list}}
      ..{{name}} = base.nullSafeMapToList(json.remove("{{name}}"), (val) => {{#mustSerialize}}new {{listType}}.fromJson(val){{/mustSerialize}}{{^mustSerialize}}{{#hasParseExpr}}base.nullSafeOperation({{/hasParseExpr}}val{{#hasParseExpr}}, {{parseExpr}}){{/hasParseExpr}}{{/mustSerialize}})
{{/list}}
{{^list}}
{{#mustSerialize}}
      ..{{name}} = new {{type}}.fromJson(json.remove("{{name}}"))
{{/mustSerialize}}
{{^mustSerialize}}
      ..{{name}} = {{#hasParseExpr}}base.nullSafeOperation({{/hasParseExpr}}json.remove("{{name}}"){{#hasParseExpr}}, {{parseExpr}}){{/hasParseExpr}}
{{/mustSerialize}}
{{/list}}
{{/properties}};
    base.addUnknownProperties(result, json, TYPE_REGISTRY);
    return result;
  }

  Map toJson() {
    Map map = super.toJson();
{{#properties}}
{{#hasParseExpr}}
    if (map.containsKey("{{name}}")) {
      map["{{name}}"] = {{#list}}base.nullSafeMapToList(map["{{name}}"], (o) => o.toString()){{/list}}{{^list}}map["{{name}}"].toString(){{/list}};
    }
{{/hasParseExpr}}
{{/properties}};
    return map;
  }

  {{name}} clone() => new {{name}}._wrap(super.clone());

  Type get streamyType => {{name}};
}
