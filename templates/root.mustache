
abstract class {{topLevelClassName}}ResourcesMixin {
{{#resources}}
  {{type}} _{{name}};
  {{type}} get {{name}} {
    if (_{{name}} == null) {
      _{{name}} = new {{type}}(this);
    }
    return _{{name}};
  }   
{{/resources}}
}

{{#docs}}/// {{.}}
{{/docs}}
class {{topLevelClassName}}
    extends streamy.Root
    with {{topLevelClassName}}ResourcesMixin {

  final streamy.TransactionStrategy _txStrategy;
  final streamy.RequestHandler requestHandler;

  {{topLevelClassName}}(
      this.requestHandler,
      {String servicePath: '{{servicePath}}',
      streamy.TypeRegistry typeRegistry: streamy.EMPTY_REGISTRY,
      streamy.TransactionStrategy txStrategy: null}) :
          super(typeRegistry, servicePath),
          this._txStrategy = txStrategy;

  Stream send(streamy.Request request) => requestHandler.handle(request);

  {{topLevelClassName}}Transaction beginTransaction() =>
      new {{topLevelClassName}}Transaction(typeRegistry, servicePath,
          _txStrategy.beginTransaction());
}

/// Provides the same API as [{{topLevelClassName}}] but runs all requests as
/// part of the same transaction.
class {{topLevelClassName}}Transaction
    extends streamy.TransactionRoot
    with {{topLevelClassName}}ResourcesMixin {

  {{topLevelClassName}}Transaction(
      streamy.TypeRegistry typeRegistry,
      String servicePath,
      streamy.Transaction tx) : super(typeRegistry, servicePath, tx);
}
