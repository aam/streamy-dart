library streamy.transformer;

import 'dart:async';
import 'package:barback/barback.dart';
import 'package:mustache/mustache.dart' as mustache;
import 'package:streamy/generator.dart';
import 'package:streamy/mixologist.dart' as mixologist;
import 'package:yaml/yaml.dart' as yaml;
import 'package:quiver/async.dart';

class StreamyYamlTransformer extends Transformer {
  
  StreamyYamlTransformer.asPlugin();
  
  String get allowedExtensions => '.streamy.yaml';
  
  Future<bool> isPrimary(AssetId asset) =>
    new Future.value(asset.path.endsWith('.streamy.yaml'));

  Future apply(Transform transform) => transform
    .primaryInput
    .readAsString()
    .then(yaml.loadYaml)
    .then(parseConfigOrDie)
    .then((config) => Emitter.fromTemplateLoader(config,
        new AssetTemplateLoader(transform)))
    .then((Emitter emitter) => apiFromConfig(emitter.config, pathPrefix:
        _prefixFrom(transform.primaryInput.id), fileReader: (path) => transform
      .getInput(new AssetId(transform.primaryInput.id.package, path))
      .then((input) => input.readAsString()))
      .then(emitter.process))
    .then((StreamyClient client) {
      _maybeOutput(transform, client.root, '', client.config.outputPrefix);
      _maybeOutput(transform, client.resources, '_resources',
          client.config.outputPrefix);
      _maybeOutput(transform, client.requests, '_requests',
          client.config.outputPrefix);
      _maybeOutput(transform, client.objects, '_objects',
          client.config.outputPrefix);
      _maybeOutput(transform, client.dispatch, '_dispatch',
          client.config.outputPrefix);
    });
  
  void _maybeOutput(Transform transform, DartFile file, String name,
      String outputPrefix) {
    if (file == null) {
      return;
    }
    var id = new AssetId(transform.primaryInput.id.package,
        '${_prefixFrom(transform.primaryInput.id)}$outputPrefix$name.dart');
    transform.addOutput(new Asset.fromString(id, file.render()));
  }
}

class AssetTemplateLoader implements TemplateLoader {
  final Transform transform;
  
  AssetTemplateLoader(this.transform);
  
  Future<mustache.Template> load(String name) => transform
    .getInput(new AssetId('streamy', 'lib/templates/$name.mustache'))
    .then((asset) => asset.readAsString())
    .then(mustache.parse);
}

class MixologistYamlTransformer extends Transformer {

  MixologistYamlTransformer.asPlugin();
  
  String get allowedExtensions => '.mixologist.yaml';
    
  Future apply(Transform transform) =>
    transform
      .primaryInput
      .readAsString()
      .then(yaml.loadYaml)
      .then(mixologist.parseConfig)
      .then((config) =>
        reduceAsync(config.paths, {}, (mixins, path) =>
          forEachAsync(
            config
              .mixins
              .where((name) => !mixins.containsKey(name)),
            (name) => transform
              .getInput(new AssetId(transform.primaryInput.id.package,
                  '${_prefixFrom(transform.primaryInput.id)}$path/$name.dart'))
              .then((asset) => asset.read().pipe(new mixologist.MixinReader()))
              .then((mixin) {
                mixins[name] = mixin;
              })
              //.catchError((e) {/* Ignore any errors, some files don't exist */})
          )
          .then((_) => mixins)
        ).then((mixins) {
        // Validate that every mixin needed has been loaded.
        var missing = config
          .mixins
          .where((mixin) => !mixins.containsKey(mixin));
        if (missing.isNotEmpty) {
          throw new Exception('Could not find mixins: ${missing.join(", ")}');
        }
        var mixinList = config.mixins.map((mixin) => mixins[mixin]).toList();
        return <String>[
          '// Generated by the Streamy Mixologist.',
          '// Mixins: ${config.mixins.join(",")}'
          '',
          'library ${config.libraryName};', '']
          ..addAll(mixologist.writeImports(mixologist.unifyImports(mixinList)))
          ..add('')
          ..addAll(new mixologist.LinearizedTarget(
              config.className, '', 'Object', mixinList).linearize())
          ..add('');
      })
      .then((lines) {
        var id = new AssetId(transform.primaryInput.id.package,
            '${_prefixFrom(transform.primaryInput.id)}${config.output}');
        transform.addOutput(new Asset.fromString(id, lines.join('\n')));
      })
    );
}

String _prefixFrom(AssetId asset) => (asset.path.split('/')..removeLast()..add('')).join('/');